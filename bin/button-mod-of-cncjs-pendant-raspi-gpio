#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var program = require('commander');
var inquirer = require('inquirer');
var pkg = require('../package.json');
var serverMain = require('../index');
// Line below and functions at end result in unhandled promise error
var SerialPort = require('serialport');
// Serial port error due to unhandled promise. Attempt to fix:
// const serialport = require('serialport');
// Try defining choices here...
// const choices = ports.map(function(port) {
//  	return port.comName;
// });

var util = require('util')
var exec = require('child_process').exec;

var sleep = require('sleep');
var now = require("performance-now")
var gpio = require('onoff').Gpio,
  button1 = new gpio(23, 'in', 'both'),
  button2 = new gpio(24, 'in', 'both'),
  button3 = new gpio(25, 'in', 'both');  // Define GPIO pins on Raspberry Pi

var options = {};

program
	.version(pkg.version)
	.usage('-s <secret> -p <port> [options]')
	.option('-l, --list', 'list available ports then exit')
    .option('-s, --secret', 'the secret key stored in the ~/.cncrc file')
	.option('-p, --port <port>', 'path or name of serial port')
	.option('-b, --baudrate <baudrate>', 'baud rate (default: 115200)', 115200)
	.option('--socket-address <address>', 'socket address or hostname (default: localhost)', 'localhost')
	.option('--socket-port <port>', 'socket port (default: 8000)', 8000)
	.option('--controller-type <type>', 'controller type: Grbl|Smoothie|TinyG (default: Grbl)', 'Grbl')
    .option('--access-token-lifetime <lifetime>', 'access token lifetime in seconds or a time span string (default: 30d)', '30d')

program.parse(process.argv);

var options = {
    secret: program.secret,
    port: program.port,
    baudrate: program.baudrate,
    socketAddress: program.socketAddress,
    socketPort: program.socketPort,
    controllerType: program.controllerType,
    accessTokenLifetime: program.accessTokenLifetime
};

if (options.list) {
	SerialPort.list(function(err, ports) {
		if (err) {
			console.error(err);
			process.exit(1);
		}
		ports.forEach(function(port) {
			console.log(port.comName);
		});
	});
	return;
}

var store = {
    controller: {
        state: {},
        settings: {}
    },
    sender: {
        status: {}
    }
};


// Global Varables
var button1_pressed_time = 0
var button1_released_time = 0
var button1_presses = 0
var button1_hold_fuction = null
var button1_presses_fuction = null
var button2_pressed_time = 0
var button2_released_time = 0
var button2_presses = 0
var button2_hold_fuction = null
var button2_presses_fuction = null
var button3_pressed_time = 0
var button3_released_time = 0
var button3_presses = 0
var button3_hold_fuction = null
var button3_presses_fuction = null


var createServer = function(options) {

  // Create Button1 Interupt
	button1.watch(function (err, state) {
		// Set Error Catch
		if (err) {
			throw err;
		}
		
		// Button1 Pressed
		if ( state ) { // button1 pressed

			// Incremmet Button1 Pressed Count
			button1_presses++

			// check button1 count
			if ( now() - button1_pressed_time >= 800 ) {  // x milisecionds between presses time
				// Reset Press Counter
				button1_presses = 1
				console.log("Button1 Count Reset")
			}

			console.log("Button1 Count: " + button1_presses)


			// Kill Old Button1 Hold Fuction
			clearTimeout(button1_hold_fuction);
			button1_hold_fuction = null;

			// Use a timeout with 1000ms (this would be your X variable)
			button1_hold_fuction = setTimeout(function() {
				// Compare key down time with key up time
				if (state && +button1_released_time < +button1_pressed_time) {
					// Key has been held down for x seconds
					console.log("button1_hold_fuction: Key has been held down for x seconds")
					blink(10, 50)

					// Poweroff
					function puts(error, stdout, stderr) { util.puts(stdout) }
					exec("sudo poweroff", puts);
				} else {
				// Key has not been held down for x seconds
					console.log("button1_hold_fuction: exit, safe timout")
				}
			}, 3000);

			// Update Time Pressed
			button1_pressed_time = now()
			//console.log("button1_pressed_time")
		} else { // button1 released
			//console.log("button1_presses: " + button1_presses)

			// Kill Old Button1 Presses Fuction
			clearTimeout(button1_presses_fuction)
			button1_presses_fuction = null

			// Update Time Released
			button1_released_time = now()
			console.log("Button1 Released: button1_released_time - button1_pressed_time: " + ( button1_released_time - button1_pressed_time))

			// Bebounce Protection
			if ( button1_released_time - button1_pressed_time < 40 ) {
				button1_presses = 0
				console.log("Button1 Bounce Detected!!!")

			} else {

				// Button1 Presses Switch
				switch (button1_presses) {
				case 0:
					console.log("Button1 Presses: " + button1_presses + " | Eletrical Noise");
					break;
				case 1:
					button1_presses_fuction = setTimeout(function() {
						
						// CNC Command
						socket.emit('write', options.port, "M05;\n");
					}, 1000);
					break;				
				default:
					button1_presses_fuction = setTimeout(function() {
						
						// CNC Command
						socket.emit('write', options.port, "$H;\n");
					}, 1000);
				}
			}

			// Kill Button1 Hold Fuction
			clearTimeout(button1_hold_fuction);
			button1_hold_fuction = null;
		}
	});
	// Create Button2 Interupt
	button2.watch(function (err, state) {
		// Set Error Catch
		if (err) {
			throw err;
		}
		
		// Button2 Pressed
		if ( state ) { // button2 pressed

			// Incremmet Button2 Pressed Count
			button2_presses++

			// check button2 count
			if ( now() - button2_pressed_time >= 800 ) {  // x milisecionds between presses time
				// Reset Press Counter
				button2_presses = 1
				console.log("Button2 Count Reset")
			}

			console.log("Button2 Count: " + button2_presses)


			// Kill Old Button2 Hold Fuction
			clearTimeout(button2_hold_fuction);
			button2_hold_fuction = null;

			
			// Update Time Pressed
			button2_pressed_time = now()
			//console.log("button2_pressed_time")
		} else { // button2 released
			//console.log("button2_presses: " + button2_presses)

			// Kill Old Button2 Presses Fuction
			clearTimeout(button2_presses_fuction)
			button2_presses_fuction = null

			// Update Time Released
			button2_released_time = now()
			console.log("Button2 Released: button2_released_time - button2_pressed_time: " + ( button2_released_time - button2_pressed_time))

			// Bebounce Protection
			if ( button2_released_time - button2_pressed_time < 40 ) {
				button2_presses = 0
				console.log("Button2 Bounce Detected!!!")

			} else {

				// Button2 Presses Switch
				switch (button2_presses) {
				case 0:
					console.log("Button2 Presses: " + button2_presses + " | Button2 Eletrical Noise");
					break;
				case 1:
					button2_presses_fuction = setTimeout(function() {
						
						// CNC Command
						socket.emit('write', options.port, "M03;\n");
					}, 1000);
					break;				
				default:
					button2_presses_fuction = setTimeout(function() {
						
						// CNC Command
						socket.emit('write', options.port, "$H;\n");
					}, 1000);
				}
			}

			// Kill Button2 Hold Fuction
			clearTimeout(button2_hold_fuction);
			button2_hold_fuction = null;
		}
	});	
	// Create Button3 Interupt
	button3.watch(function (err, state) {
		// Set Error Catch
		if (err) {
			throw err;
		}
		
		// Button3 Pressed
		if ( state ) { // button3 pressed

			// Incremmet Button3 Pressed Count
			button3_presses++

			// check button3 count
			if ( now() - button3_pressed_time >= 800 ) {  // x milisecionds between presses time
				// Reset Press Counter
				button3_presses = 1
				console.log("Button3 Count Reset")
			}

			console.log("Button3 Count: " + button3_presses)


			// Kill Old Button3 Hold Fuction
			clearTimeout(button3_hold_fuction);
			button3_hold_fuction = null;

			
			// Update Time Pressed
			button3_pressed_time = now()
			//console.log("button3_pressed_time")
		} else { 
			// button3 released
			//console.log("button3_presses: " + button3_presses)

			// Kill Old Button3 Presses Fuction
			clearTimeout(button3_presses_fuction)
			button3_presses_fuction = null

			// Update Time Released
			button3_released_time = now()
			console.log("Button3 Released: button3_released_time - button3_pressed_time: " + ( button3_released_time - button3_pressed_time))

			// Bebounce Protection
			if ( button3_released_time - button3_pressed_time < 40 ) {
				button3_presses = 0
				console.log("Button3 Bounce Detected!!!")

			} else {

				// Button3 Presses Switch
				switch (button3_presses) {
				case 0:
					console.log("Button3 Presses: " + button3_presses + " | Button3 Eletrical Noise");
					break;
				case 1:
					button3_presses_fuction = setTimeout(function() {
						
						// CNC Command
						socket.emit('write', options.port, "M108;\n");
					}, 1000);
					break;				
				default:
					button3_presses_fuction = setTimeout(function() {
						
						// CNC Command
						socket.emit('write', options.port, "$H;\n");
					}, 1000);
				}
			}

			// Kill Button3 Hold Fuction
			clearTimeout(button3_hold_fuction);
			button3_hold_fuction = null;
		}

		//console.log(button_pressed_time.toFixed(3)) // the number of milliseconds the current node process is running
		//console.log("TEST" + (button_released_time - button_pressed_time).toFixed(3)) // ~ 0.002 on my system
	});

  // Server Connection
  serverMain(options, function(err, socket) {
      // Grbl
      socket.on('Grbl:state', function(state) {
          store.controller.state = state;
      });
      socket.on('Grbl:settings', function(settings) {
          store.controller.settings = settings;
      });

      // Smoothie
      socket.on('Smoothie:state', function(state) {
          store.controller.state = state;
      });
      socket.on('Smoothie:settings', function(settings) {
          store.controller.settings = settings;
      });
	  
      // Marlin
      socket.on('Marlin:state', function(state) {
          store.controller.state = state;
      });
      socket.on('Marlin:settings', function(settings) {
          store.controller.settings = settings;
      });

      // TinyG
      socket.on('TinyG:state', function(state) {
          store.controller.state = state;
      });
      socket.on('TinyG:settings', function(settings) {
          store.controller.settings = settings;
      });

      // Sender
      socket.on('sender:status', function(data) {
          store.sender.status = data;
      });


    });
};

if (options.port) {
    createServer(options);
    return;
}
// Old serialport functions related to unhandled promise error
SerialPort.list(function(err, ports) {
    if (err) {
        console.error(err);
        process.exit(1);
    }
    const choices = ports.map(function(port) {
        return port.comName;
    });
});

// Replacement serialport functions
// Promise approach
// SerialPort.list().then(ports => {
//   ports.forEach(function(port) {
//     console.log(port.path);
//     console.log(port.pnpId);
//     console.log(port.manufacturer);
//   const choices = ports.map(function(port) {
//  	return port.comName;
//   });
//   });
// });

    inquirer.prompt([{
        type: 'list',
        name: 'port',
        message: 'Specify which port you want to use?',
        choices: choices
    }]).then(function(answers) {
        options.port = answers.port;

        createServer(options);
});

// Clean Proccess Kill
process.on('SIGINT', function () {
	led.unexport();
	button.unexport();
	clearTimeout(button_hold_fuction);
	button_hold_fuction = null
	clearTimeout(button_presses_fuction);
	button_presses_fuction = null
})
